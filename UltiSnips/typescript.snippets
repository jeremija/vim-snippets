priority -50

extends javascript

snippet rtest "Test a React Component using Jest"
import {${1:`!p snip.rv = snip.basename.replace('.test', '')`}} from './$1'
import * as React from 'react'
import * as ReactDOM from 'react-dom'
import * as TestUtils from 'react-dom/test-utils'

describe('$1', () => {

	let component: $1
	let node: Element
	function render() {
		component = TestUtils.renderIntoDocument(
			<$1 />
		) as $1
		node = ReactDOM.findDOMNode(component) as Element
	}

	describe('render', () => {

		it('renders without errors', () => {
			render();
			expect(node).toBeTruthy();
		});

		${VISUAL}$0

	});

});
endsnippet

snippet rtestcon "Test a React Container using Jest"
import {${1:`!p snip.rv = snip.basename.replace('.test', '')`}} from './$1'
import {${2:`!p snip.rv = t[1].replace('Container', '')`}} from '../components/$2'
import * as React from 'react'
import * as ReactDOM from 'react-dom'
import * as TestUtils from 'react-dom/test-utils'
import {Provider} from 'react-redux'
import {store} from '../store'

describe('MIDISettingsContainer', () => {

	let node: Element
	let component: $2
	function render () {
		const provider = TestUtils.renderIntoDocument(
			<Provider store={store}>
				<$1 />
			</Provider>
		) as Provider

		component = TestUtils.findRenderedComponentWithType(
			provider,
			$2
		)
		node = ReactDOM.findDOMNode(component) as Element
	}

	describe('render', () => {
		it('renders', () => {
			render()
			expect(node).toBeTruthy()
		})
	})

})
endsnippet

snippet rcom "React.PureComponent"
import * as React from 'react'

export interface IStateProps {

}

export interface IDispatchProps {

}

export interface IState {

}

export type IProps = IStateProps & IDispatchProps

export class ${1:`!p snip.rv = snip.basename`} extends React.PureComponent<IProps, IState> {
	render () {
		return (
			<div className='$1'>
				${VISUAL}$0
			</div>
		)
	}
}
endsnippet

snippet rcon "Redux Component"
import {
	${1:`!p snip.rv = snip.basename.replace('.', '').replace('Container', '')`},
	IStateProps,
	IDispatchProps,
} from '../components/$1'
import * as ${2:Actions} from '../actions/$2'
import {State} from '../reducers'
import {bindActionCreators, Dispatch} from 'redux'
import {connect} from 'react-redux'

function mapStateToProps (state: State): IStateProps {
	return {
		${VISUAL}$0
	}
}

function mapDispatchToProps (dispatch: Dispatch): IDispatchProps {
	return {
		...bindActionCreators($2, dispatch)
	}
}

export const $1Container =
	connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet

snippet imp "Import a module"
import {$1} from '${2:.}/$1'
endsnippet

snippet red "Reducer"
import {ActionKeys, IActions} from '../actions/${1:`!p snip.rv = snip.basename`}Actions'

export interface I$1State {
}

export const defaultState: I$1State = {
}

export function $1(
	state: I$1State = defaultState,
	action: IActions,
): I$1State {
	switch (action.type) {
		${VISUAL}$0
		default:
			return state
	}
}
endsnippet

snippet act "Redux Action"
export enum ActionKeys {
	$1
}

export type IActions = null
endsnippet
